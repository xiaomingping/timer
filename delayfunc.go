package ztimer

import (
	"fmt"
	"go.uber.org/zap"
	"reflect"
)

// DelayFunc
/************************************************************************************************************
对象: DelayFunc,
功能: 延迟调用函数对象,

编程:xiaomp,
日期:2021/12/11
************************************************************************************************************/
type DelayFunc struct {
	f    func(...interface{}) //f : 延迟函数调用原型
	args []interface{}        //args: 延迟调用函数传递的形参
}

//NewDelayFunc
/***********************************************************************************************************
函数: NewDelayFunc
功能: 创建一个延迟调用函数
参数: f--延迟函数,args--延迟调用函数传递的形参
返回:

编程: xiaomp
日期: 2021/12/11
***********************************************************************************************************/
func NewDelayFunc(f func(v ...interface{}), args []interface{}) *DelayFunc {
	return &DelayFunc{
		f:    f,
		args: args,
	}
}

//String
/***********************************************************************************************************
函数: String
功能: 打印当前延迟函数的信息,用于日志记录
参数: nil
返回: string--日志信息

编程: xiaomp
日期: 2021/12/11
***********************************************************************************************************/
func (df *DelayFunc) String() string {
	return fmt.Sprintf("{DelayFun:%s, args:%v}", reflect.TypeOf(df.f).Name(), df.args)
}

//Call
/***********************************************************************************************************
函数: Call
功能: 执行延迟函数
参数: nil
返回: nil

编程: xiaomp
日期: 2021/12/11
***********************************************************************************************************/
func (df *DelayFunc) Call() {
	defer func() {
		if err := recover(); err != nil {
			zap.S().Error(df.String(), "Call err: ", err)
		}
	}()
	//调用定时器超时函数
	df.f(df.args...)
}
